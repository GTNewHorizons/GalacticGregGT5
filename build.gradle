import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT'
    }
}

plugins {
    id("org.ajoberstar.grgit") version("3.1.1")
}

apply plugin: 'forge'
apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS)
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    version = "1.0.3"
    group = "bloodasp.galactigreg"
    archivesBaseName = "galacticgreg"

    minecraftVersion = "1.7.10"
    forgeVersion = "10.13.4.1614"
}

minecraft {
    version = minecraftVersion + "-" + forgeVersion + "-" + minecraftVersion
    runDir = "run"

    replaceIn "src/main/java/bloodasp/galacticgreg/GalacticGreg.java"
    replace "GRADLETOKEN_VERSION", version
}

repositories {
    maven {
        name = "CodeChicken"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        url = "https://jitpack.io"
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
    maven {
        name = "appleCore"
        url = "http://www.ryanliptak.com/maven/"
    }
    ivy {
        name = "gtnh_download_source"
        artifactPattern("http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision].[ext]")
    }
    maven {
        name = "UsrvDE/GTNH"
        url = "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases/"
    }
    maven {
        name = "gt"
        url = "https://gregtech.overminddl1.com/"
    }
    maven {
        url "https://cursemaven.com"
    }
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/repository/maven-public"
    }
}

dependencies {

    /*compile("com.github.GTNewHorizons:GT5-Unofficial:experimental-SNAPSHOT:dev") {
        setChanging(true)
    }*/
    /*compile files('libs/gregtech-5.09.33.23-dev.jar')
    compile files('libs/industrialcraft-2-2.2.810-experimental-dev.jar')
    compile files('libs/appliedenergistics2-rv2-stable-7-dev.jar')
    compile files('libs/bartworks[1.7.10]-0.5.2_pre25-dev.jar')
    compile files('libs/GalacticraftCore-Dev-1.7-3.0.12.497.jar')
    compile files('libs/Galacticraft-Planets-Dev-1.7-3.0.12.497.jar')
    compile files('MicdoodleCore-Dev-1.7-3.0.12.497.jar')*/
    /*compile("com.github.SinTh0r4s:VisualProspecting:master-SNAPSHOT") {
        exclude module: "GT5-Unofficial"
    }*/
}

jar {
    getArchiveAppendix().value("${minecraft.version}")
    getArchiveVersion().value("${project.version}")
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

task sourceJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives deobfJar
    archives sourceJar
}

/*task signJar(dependsOn: 'reobf'){
    doLast {
        ant.signjar(
            destDir: jar.destinationDir,
            jar: jar.getArchivePath(),
            alias: findProperty('keyStoreAlias') ?: '',
            keystore: findProperty('keyStore') ?: '',
            storepass: findProperty('keyStorePass') ?: '',
            digestalg: findProperty('signDigestAlg') ?: '',
            tsaurl: findProperty('signTSAurl') ?: '',
            verbose: true
            )
    }
}*/
